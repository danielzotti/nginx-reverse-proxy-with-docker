server {
  # web service1 config.
  listen 80;
  server_name site1.test;
  return 301 https://site1.test$request_uri;

  # if you want to prevent search engine indexing
  location /robots.txt {
      return 200 "User-agent: *\nDisallow: /\n";
  }

}
server {
  listen 443 ssl http2;
  server_name site1.test;

  # Path for SSL config/key/certificate
  ssl_certificate /etc/nginx/certs/site1.crt;
  ssl_certificate_key /etc/nginx/certs/site1.key;
  include /etc/nginx/includes/ssl.conf;

  location / {
    include /etc/nginx/includes/proxy.conf;
    proxy_pass http://website1_app_1;
  }

  access_log off;
  error_log  /var/log/nginx/error.log error;

  # If you want to protect the website with username and password
  auth_basic "Administrator Login";
  auth_basic_user_file /etc/nginx/htpasswd/.htpasswd;
}

server {
  # web service2 config.
  listen 80;
  server_name site2.test;
  return 301 https://site2.test$request_uri;

  # if you want to prevent search engine indexing
  location /robots.txt {
      return 200 "User-agent: *\nDisallow: /\n";
  }
}
server {
  listen 443 ssl http2;
  server_name site2.test;

  # Path for SSL config/key/certificate
  ssl_certificate /etc/nginx/certs/site2.crt;
  ssl_certificate_key /etc/nginx/certs/site2.key;
  include /etc/nginx/includes/ssl.conf;

  location / {
    include /etc/nginx/includes/proxy.conf;
    proxy_pass http://website2_app_1;
  }

  access_log off;
  error_log  /var/log/nginx/error.log error;
}

# Default
server {
  listen 80 default_server;

  server_name _;
  root /var/www/html;

  charset UTF-8;

  error_page 404 /backend-not-found.html;
  location = /backend-not-found.html {
    allow   all;
  }
  location / {
    return 404;
  }

  access_log off;
  log_not_found off;
  error_log  /var/log/nginx/error.log error;
}